{"project": "nilearn", "project_url": "https://nilearn.github.io", "show_commit_url": "https://github.com/nilearn/nilearn/commit/", "hash_length": 8, "revision_to_hash": {"2709": "58fb3d058907a709caed14946e3a3410c1240161", "2778": "fde10ae71ab9df9adb4e4b11d9dff8a0775bd8e7", "3092": "6854e29ba97ccd42b3052e5bf446077ef3558cf5", "3252": "5c9709cc131ed46913ed454a16cbb1e25bfa4592", "3288": "1bdb686ca238f9f147641870854a783579f7a1a5", "3833": "c6b03f2ea7c75a3d80ff25b2d6c1b7dfe9dc18a8", "4133": "22eb0c2949a4167e7796b11b71d2fcff7f9c94a9", "4147": "20a05bead3b3e7f5f5c49926b858cc7ea4b5413b", "4152": "4cacc465c12a38009c330d036f0d278d01724e8a", "6154": "c4898338cba608d37f552d4f3fffe1261e6a07bf", "6158": "4199ed9c8cc3ec548793c1c734bb846d173bee32", "6347": "e5fef38140a688b374b383db6296c12ea945786e", "6419": "96a3f0f72b4f25af771116251324cbec4c0d2055", "6717": "070d3929431897ec175b4b2c869826959dda85ab", "6989": "4988bd761e9ba98ac784d6f99c4a9adf3f79227f", "7188": "67278ac891b599e592ea33a049d89b47e2fc44ce", "7314": "22ac1ae6e9925ddefdb849cd2e6981e4d1947aeb", "7317": "f1cc501a9bc7aafecdbe1fa4047a0a8aa3fa541f", "7319": "c5895f6ea864f042683cdf24e517694785fdca10", "7902": "58d4a33ad5f0fca7004790717988a5232e195666", "8201": "d2b5a93567aa49dd246acac443415dad86130b2b", "8313": "a894d6d931fe7c2b9341dcad228d364ac9580cd3", "8727": "627be2dc74c793b4d489ba62931288d8b71ef401", "8908": "972b8c12ee021f9c362f9b1cd165610ad8f5172a", "9015": "b4f71e5cb31fb0bef2eb9e253706d486edcec95a", "9433": "0b013683b96df6f8fb0124467e820e1326a25489", "9477": "0d2d692938662d54f42ebc1fc67c8f9729bdb73f", "9757": "4be29274fae131b36052c7f1c087b10f7deec519", "9910": "05ca61701ede4e82989d94eaa8b1ef5909b9ccaf", "10115": "61f469058dd16f64df4bc95cdd0d29e44b55d020", "10615": "4ff9717a8d9faa873c2e4137e8445a76865e7c56", "10929": "bccf672b5bbd12274c0504b7c35c75058ccc7e70", "11849": "7e09df29d06153b7d198f9a5b7f607d1f5b999d6", "11904": "b74b496bade616be483449c6da33c7c87e27cc77", "11988": "0941897aca6f3073221fcd3483afe91b8305b27c", "12194": "5acb6570832f2870bdd77b0a71a3b063540de5f9", "12308": "324935c0f4a8743ad82e8a3a3052e010fb10b855", "12417": "9835930f414180d43c2d3287dd6d94bad31a710a", "13436": "148ddbd49454d48713a831d2b7a3e9621aafaf22", "13933": "ad04ee8ce91fde193fe4627f666ddeb52271a383", "14622": "297b15095e75da1566018a63b23a86031b90dfa5", "15096": "2fd6665664f27dfbf1f10aeeba660adc9b560361", "16113": "72e810f01ddd05aa28573edf9aedbaad6ddc2a98", "16441": "9ddfa7259de3053a5ed6655cd662e115926cf6a5", "17035": "98a3ee060b55aa073118885d11cc6a1cecd95059", "17515": "9c29e3376243b643a72f78b8b98a56d12c2e99bb", "17879": "aa480cedef435f179e0daff15700fb731abaa3b3", "19165": "321494420f95c7a5e2172108400194b37a02e628", "20572": "960589c05b6a63ed612f2feb749ee4472e5aa43f", "21750": "a950195e83d6f9af64fa3166369427b8a58d1066", "22103": "4f4730163097457cf9ddb5674ffd158ee8fa822e", "24648": "04be71faa15194e41e9455ca87d3b4427580ff42", "25365": "7a8cd0ee7161c4ea5ce4c2df248f0113890e3070", "27300": "2e9d85e9f82d9466ab349061b340aa8c42906372"}, "revision_to_date": {"2709": 1418230434000, "2778": 1420549006000, "3092": 1423231525000, "3252": 1424962556000, "3288": 1425241693000, "3833": 1431422502000, "4133": 1436805783000, "4147": 1436809042000, "4152": 1436822856000, "6154": 1449989642000, "6158": 1450037476000, "6347": 1454669989000, "6419": 1455901486000, "6717": 1460014138000, "6989": 1465833321000, "7188": 1470640110000, "7314": 1474229287000, "7317": 1474234602000, "7319": 1474236389000, "7902": 1487873310000, "8201": 1492333110000, "8313": 1497973232000, "8727": 1511124255000, "8908": 1520845675000, "9015": 1528975233000, "9433": 1533297106000, "9477": 1533412829000, "9757": 1539100481000, "9910": 1539795151000, "10115": 1542383346000, "10615": 1555061395000, "10929": 1555511042000, "11849": 1571671069000, "11904": 1572366013000, "11988": 1573476398000, "12194": 1575895643000, "12308": 1579697801000, "12417": 1582628389000, "13436": 1605181574000, "13933": 1615381867000, "14622": 1623848591000, "15096": 1631803227000, "16113": 1643385906000, "16441": 1649853487000, "17035": 1661339897000, "17515": 1673011490000, "17879": 1677576998000, "19165": 1682602926000, "20572": 1695985518000, "21750": 1706515599000, "22103": 1712652089000, "24648": 1733141217000, "25365": 1734693757000, "27300": 1742397505000}, "params": {"arch": ["x86_64"], "cpu": ["AMD EPYC 7763 64-Core Processor"], "machine": ["fv-az1047-605"], "num_cpu": ["4"], "os": ["Linux 6.8.0-1021-azure"], "ram": ["16373796"], "python": ["3.13"], "branch": ["main"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "AMD EPYC 7763 64-Core Processor", "machine": "fv-az1047-605", "num_cpu": "4", "os": "Linux 6.8.0-1021-azure", "ram": "16373796", "python": "3.13", "branch": "main"}], "benchmarks": {"benchmarks.Loading.peakmem_loading": {"code": "class Loading:\n    def peakmem_loading(self, params):\n        loader = params\n        if loader == \"nilearn\":\n            load_img(\"fmri.nii.gz\")\n        elif loader == \"nibabel (ref)\":\n            nib.load(\"fmri.nii.gz\")\n\nclass Benchmark:\n    def setup_cache(self):\n        # get an image\n        fmri_data = fetch_adhd(n_subjects=10)\n        concat = concat_imgs(fmri_data.func)\n        concat.to_filename(\"fmri.nii.gz\")\n    \n        # get a mask\n        atlas_path = fetch_atlas_basc_multiscale_2015(resolution=7).maps\n        resampled_atlas = resample_to_img(\n            atlas_path,\n            concat,\n            interpolation=\"nearest\",\n            copy_header=True,\n            force_resample=True,\n        )\n        mask = resampled_atlas.get_fdata() == 1\n        mask_img = new_img_like(\n            resampled_atlas,\n            mask,\n            affine=resampled_atlas.affine,\n            copy_header=True,\n        )\n        mask_img.to_filename(\"mask.nii.gz\")", "name": "benchmarks.Loading.peakmem_loading", "param_names": ["loader"], "params": [["'nilearn'", "'nibabel (ref)'"]], "setup_cache_key": "common:11", "type": "peakmemory", "unit": "bytes", "version": "6dd669775aff24e08dc913d07d3cbfdebca987198f83163385be9fad9c2b2070"}, "benchmarks.Loading.time_loading": {"code": "class Loading:\n    def time_loading(self, params):\n        loader = params\n        if loader == \"nilearn\":\n            load_img(\"fmri.nii.gz\")\n        elif loader == \"nibabel (ref)\":\n            nib.load(\"fmri.nii.gz\")\n\nclass Benchmark:\n    def setup_cache(self):\n        # get an image\n        fmri_data = fetch_adhd(n_subjects=10)\n        concat = concat_imgs(fmri_data.func)\n        concat.to_filename(\"fmri.nii.gz\")\n    \n        # get a mask\n        atlas_path = fetch_atlas_basc_multiscale_2015(resolution=7).maps\n        resampled_atlas = resample_to_img(\n            atlas_path,\n            concat,\n            interpolation=\"nearest\",\n            copy_header=True,\n            force_resample=True,\n        )\n        mask = resampled_atlas.get_fdata() == 1\n        mask_img = new_img_like(\n            resampled_atlas,\n            mask,\n            affine=resampled_atlas.affine,\n            copy_header=True,\n        )\n        mask_img.to_filename(\"mask.nii.gz\")", "min_run_count": 2, "name": "benchmarks.Loading.time_loading", "number": 0, "param_names": ["loader"], "params": [["'nilearn'", "'nibabel (ref)'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "common:11", "type": "time", "unit": "seconds", "version": "80bfb969ea7be5528f85b1987c523243b8bd21341982e4bbe822b65c025a6a14", "warmup_time": -1}, "benchmarks.Masking.peakmem_masker": {"code": "class Masking:\n    def peakmem_masker(self, implementation, loader):\n        if loader == \"nilearn\":\n            mask = load_img(\"mask.nii.gz\")\n            img = load_img(\"fmri.nii.gz\")\n        elif loader == \"nibabel (ref)\":\n            mask = nib.load(\"mask.nii.gz\")\n            img = nib.load(\"fmri.nii.gz\")\n    \n        if implementation == \"nilearn\":\n            NiftiMasker(mask_img=mask).fit_transform(img)\n        elif implementation == \"numpy (ref)\":\n            mask = np.asarray(mask.dataobj).astype(bool)\n            img = np.asarray(img.dataobj)\n            img[mask]\n\nclass Benchmark:\n    def setup_cache(self):\n        # get an image\n        fmri_data = fetch_adhd(n_subjects=10)\n        concat = concat_imgs(fmri_data.func)\n        concat.to_filename(\"fmri.nii.gz\")\n    \n        # get a mask\n        atlas_path = fetch_atlas_basc_multiscale_2015(resolution=7).maps\n        resampled_atlas = resample_to_img(\n            atlas_path,\n            concat,\n            interpolation=\"nearest\",\n            copy_header=True,\n            force_resample=True,\n        )\n        mask = resampled_atlas.get_fdata() == 1\n        mask_img = new_img_like(\n            resampled_atlas,\n            mask,\n            affine=resampled_atlas.affine,\n            copy_header=True,\n        )\n        mask_img.to_filename(\"mask.nii.gz\")", "name": "benchmarks.Masking.peakmem_masker", "param_names": ["implementation", "loader"], "params": [["'nilearn'", "'numpy (ref)'"], ["'nilearn'", "'nibabel (ref)'"]], "setup_cache_key": "common:11", "type": "peakmemory", "unit": "bytes", "version": "ed554912efbf44353b405056c58ea1d3c81aab081e76cbf7aad083acd1568180"}, "benchmarks.Masking.time_masker": {"code": "class Masking:\n    def time_masker(self, implementation, loader):\n        if loader == \"nilearn\":\n            mask = load_img(\"mask.nii.gz\")\n            img = load_img(\"fmri.nii.gz\")\n        elif loader == \"nibabel (ref)\":\n            mask = nib.load(\"mask.nii.gz\")\n            img = nib.load(\"fmri.nii.gz\")\n    \n        if implementation == \"nilearn\":\n            NiftiMasker(mask_img=mask).fit_transform(img)\n        elif implementation == \"numpy (ref)\":\n            mask = np.asarray(mask.dataobj).astype(bool)\n            img = np.asarray(img.dataobj)\n            img[mask]\n\nclass Benchmark:\n    def setup_cache(self):\n        # get an image\n        fmri_data = fetch_adhd(n_subjects=10)\n        concat = concat_imgs(fmri_data.func)\n        concat.to_filename(\"fmri.nii.gz\")\n    \n        # get a mask\n        atlas_path = fetch_atlas_basc_multiscale_2015(resolution=7).maps\n        resampled_atlas = resample_to_img(\n            atlas_path,\n            concat,\n            interpolation=\"nearest\",\n            copy_header=True,\n            force_resample=True,\n        )\n        mask = resampled_atlas.get_fdata() == 1\n        mask_img = new_img_like(\n            resampled_atlas,\n            mask,\n            affine=resampled_atlas.affine,\n            copy_header=True,\n        )\n        mask_img.to_filename(\"mask.nii.gz\")", "min_run_count": 2, "name": "benchmarks.Masking.time_masker", "number": 0, "param_names": ["implementation", "loader"], "params": [["'nilearn'", "'numpy (ref)'"], ["'nilearn'", "'nibabel (ref)'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "common:11", "type": "time", "unit": "seconds", "version": "3605d8fe09011d1e2927b6b725676b1eecd87d92644f088d37b822c04614dca2", "warmup_time": -1}, "benchmarks.Mean.peakmem_mean": {"code": "class Mean:\n    def peakmem_mean(self, params):\n        loader = params\n        if loader == \"nilearn\":\n            img = load_img(\"fmri.nii.gz\")\n        elif loader == \"nibabel (ref)\":\n            img = nib.load(\"fmri.nii.gz\")\n    \n        mean_img(img, copy_header=True)\n\nclass Benchmark:\n    def setup_cache(self):\n        # get an image\n        fmri_data = fetch_adhd(n_subjects=10)\n        concat = concat_imgs(fmri_data.func)\n        concat.to_filename(\"fmri.nii.gz\")\n    \n        # get a mask\n        atlas_path = fetch_atlas_basc_multiscale_2015(resolution=7).maps\n        resampled_atlas = resample_to_img(\n            atlas_path,\n            concat,\n            interpolation=\"nearest\",\n            copy_header=True,\n            force_resample=True,\n        )\n        mask = resampled_atlas.get_fdata() == 1\n        mask_img = new_img_like(\n            resampled_atlas,\n            mask,\n            affine=resampled_atlas.affine,\n            copy_header=True,\n        )\n        mask_img.to_filename(\"mask.nii.gz\")", "name": "benchmarks.Mean.peakmem_mean", "param_names": ["loader"], "params": [["'nilearn'", "'nibabel (ref)'"]], "setup_cache_key": "common:11", "type": "peakmemory", "unit": "bytes", "version": "6b842c65c0f124399f44bde6045ec2667ac91510fcc77f0cb2f5634c3a6d45f6"}, "benchmarks.Mean.time_mean": {"code": "class Mean:\n    def time_mean(self, params):\n        loader = params\n        if loader == \"nilearn\":\n            img = load_img(\"fmri.nii.gz\")\n        elif loader == \"nibabel (ref)\":\n            img = nib.load(\"fmri.nii.gz\")\n    \n        mean_img(img, copy_header=True)\n\nclass Benchmark:\n    def setup_cache(self):\n        # get an image\n        fmri_data = fetch_adhd(n_subjects=10)\n        concat = concat_imgs(fmri_data.func)\n        concat.to_filename(\"fmri.nii.gz\")\n    \n        # get a mask\n        atlas_path = fetch_atlas_basc_multiscale_2015(resolution=7).maps\n        resampled_atlas = resample_to_img(\n            atlas_path,\n            concat,\n            interpolation=\"nearest\",\n            copy_header=True,\n            force_resample=True,\n        )\n        mask = resampled_atlas.get_fdata() == 1\n        mask_img = new_img_like(\n            resampled_atlas,\n            mask,\n            affine=resampled_atlas.affine,\n            copy_header=True,\n        )\n        mask_img.to_filename(\"mask.nii.gz\")", "min_run_count": 2, "name": "benchmarks.Mean.time_mean", "number": 0, "param_names": ["loader"], "params": [["'nilearn'", "'nibabel (ref)'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "common:11", "type": "time", "unit": "seconds", "version": "abc2a1e3e03679b6d5dccf7b51138e7b273c27660229ca2c07e7e0bd3df6ca24", "warmup_time": -1}, "benchmarks.Slicing.peakmem_slicing": {"code": "class Slicing:\n    def peakmem_slicing(self, params):\n        loader = params\n        if loader == \"nilearn\":\n            img = load_img(\"fmri.nii.gz\")\n        elif loader == \"nibabel (ref)\":\n            img = nib.load(\"fmri.nii.gz\")\n    \n        img.dataobj[..., 0]\n\nclass Benchmark:\n    def setup_cache(self):\n        # get an image\n        fmri_data = fetch_adhd(n_subjects=10)\n        concat = concat_imgs(fmri_data.func)\n        concat.to_filename(\"fmri.nii.gz\")\n    \n        # get a mask\n        atlas_path = fetch_atlas_basc_multiscale_2015(resolution=7).maps\n        resampled_atlas = resample_to_img(\n            atlas_path,\n            concat,\n            interpolation=\"nearest\",\n            copy_header=True,\n            force_resample=True,\n        )\n        mask = resampled_atlas.get_fdata() == 1\n        mask_img = new_img_like(\n            resampled_atlas,\n            mask,\n            affine=resampled_atlas.affine,\n            copy_header=True,\n        )\n        mask_img.to_filename(\"mask.nii.gz\")", "name": "benchmarks.Slicing.peakmem_slicing", "param_names": ["loader"], "params": [["'nilearn'", "'nibabel (ref)'"]], "setup_cache_key": "common:11", "type": "peakmemory", "unit": "bytes", "version": "c8eca160e5dc787d31b7bca3d01dc54868592f4c00fcb53fc3b56b2c186cac48"}, "benchmarks.Slicing.time_slicing": {"code": "class Slicing:\n    def time_slicing(self, params):\n        loader = params\n        if loader == \"nilearn\":\n            img = load_img(\"fmri.nii.gz\")\n        elif loader == \"nibabel (ref)\":\n            img = nib.load(\"fmri.nii.gz\")\n    \n        img.dataobj[..., 0]\n\nclass Benchmark:\n    def setup_cache(self):\n        # get an image\n        fmri_data = fetch_adhd(n_subjects=10)\n        concat = concat_imgs(fmri_data.func)\n        concat.to_filename(\"fmri.nii.gz\")\n    \n        # get a mask\n        atlas_path = fetch_atlas_basc_multiscale_2015(resolution=7).maps\n        resampled_atlas = resample_to_img(\n            atlas_path,\n            concat,\n            interpolation=\"nearest\",\n            copy_header=True,\n            force_resample=True,\n        )\n        mask = resampled_atlas.get_fdata() == 1\n        mask_img = new_img_like(\n            resampled_atlas,\n            mask,\n            affine=resampled_atlas.affine,\n            copy_header=True,\n        )\n        mask_img.to_filename(\"mask.nii.gz\")", "min_run_count": 2, "name": "benchmarks.Slicing.time_slicing", "number": 0, "param_names": ["loader"], "params": [["'nilearn'", "'nibabel (ref)'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "common:11", "type": "time", "unit": "seconds", "version": "ca2f6520250928c03703a0258d472685396007ec6f72372966793e1eb65f94e0", "warmup_time": -1}}, "machines": {"fv-az1047-605": {"arch": "x86_64", "cpu": "AMD EPYC 7763 64-Core Processor", "machine": "fv-az1047-605", "num_cpu": "4", "os": "Linux 6.8.0-1021-azure", "ram": "16373796", "version": 1}}, "tags": {"0.0.1b1": 11904, "0.1": 3092, "0.1.1": 3252, "0.1.2": 3288, "0.1.3": 3833, "0.1.4": 4133, "0.1.4.1post1": 4152, "0.10.0": 17515, "0.10.1": 19165, "0.10.1rc1": 17879, "0.10.2": 20572, "0.10.3": 21750, "0.10.4": 22103, "0.11.0": 24648, "0.11.1": 25365, "0.1b1": 2778, "0.2.0": 6154, "0.2.1": 6158, "0.2.2": 6347, "0.2.3": 6419, "0.2.4": 6717, "0.2.5": 6989, "0.2.5.1": 7188, "0.2.5.2": 7314, "0.2.5.3": 7317, "0.2.6": 7319, "0.3.0": 8201, "0.3.0b1": 7902, "0.3.1": 8313, "0.4.0": 8727, "0.4.1": 8908, "0.4.2": 9015, "0.5.0a": 9477, "0.5.0b": 9910, "0.5.1": 10615, "0.5.2": 10929, "0.6.0": 12194, "0.6.0a": 11849, "0.6.0a0": 11849, "0.6.0b0": 11988, "0.6.1": 12308, "0.6.2": 12417, "0.7.0": 13436, "0.7.1": 13933, "0.8.0": 14622, "0.8.1": 15096, "0.9.0": 16113, "0.9.1": 16441, "0.9.2": 17035, "pre-troubleshooting": 9433, "0.1a1": 2709, "debian/0.1.4+git3-1": 4147, "rel0.0.1b": 9757, "0.5.0": 10115}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}